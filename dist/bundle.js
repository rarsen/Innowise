(() => { var e = { 680: e => { e.exports = class { constructor() { this.clear() } clear() { this.currentValue = "0", this.prevValue = null, this.operator = null } appendNumber(e) { this.currentValue = "0" === this.currentValue ? e : this.currentValue + e } chooseOperation(e) { null !== this.operator && this.compute(), this.prevValue = this.currentValue, this.operator = e, this.currentValue = "" } compute() { let e; const t = parseFloat(this.prevValue), r = parseFloat(this.currentValue); if (!isNaN(t) && !isNaN(r)) { switch (this.operator) { case "+": e = t + r; break; case "-": e = t - r; break; case "*": e = t * r; break; case "/": e = 0 !== r ? t / r : "Error" }this.currentValue = e.toString(), this.operator = null, this.prevValue = null } } } } }, t = {}; const r = function r(a) { var s = t[a]; if (void 0 !== s) return s.exports; var o = t[a] = { exports: {} }; return e[a](o, o.exports, r), o.exports }(680), a = document.getElementById("screen"), s = document.querySelector(".buttons"), o = new r; s.addEventListener("click", (e => { const t = e.target; if (t.dataset.number) o.appendNumber(t.dataset.number); else if (t.dataset.action) switch (t.dataset.action) { case "clear": o.clear(); break; case "equals": o.compute(); break; case "add": o.chooseOperation("+"); break; case "subtract": o.chooseOperation("-"); break; case "multiply": o.chooseOperation("*"); break; case "divide": o.chooseOperation("/") }a.textContent = o.currentValue })) })();